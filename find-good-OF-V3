// The top of every source code file must include this line
#include "sierrachart.h"
#include <vector>            // For using std::vector
#include <sstream>           // For string manipulation


#define CHECK_5LEVEL 1 
#define CHECK_5LEVEL_AND_POCATBOTTOM 2 
#define CHECK_5LEVEL_AND_POCATBOTTOM_AND_UPCANDLE 3
#define CHECK_5LEVEL_AND_POCATTOP_AND_UPCANDLE 4  
#define MAX_VECTOR_SIZE 500

// Structure to represent an good buy OF start bar
struct st_GoodBuyOFStartBar {
    int index;
    SCDateTime time;
    float volume;
    //bool bullish; // true for bullish, false for bearish

    //EngulfingPattern(int idx, SCDateTime t, float v, bool bull) : index(idx), time(t), volume(v), bullish(bull) {}
	st_GoodBuyOFStartBar(int idx, SCDateTime t, float v) : index(idx), time(t), volume(v) {}
};

int isThisStartBarOFGoodBuyOrderflow(SCStudyInterfaceRef sc , int startIndex);

bool checkValidBar(SCStudyInterfaceRef sc , int idx , int condition);

void findGoodBuyOrderFlow(SCStudyInterfaceRef sc);

std::vector<st_GoodBuyOFStartBar> detectedGoodBuyStartBars;


SCDLLName("SUA FIND GOOD BUY OF")

SCSFExport scsf_FindGoodBuyOF(SCStudyInterfaceRef sc)
{
	

	SCString msg;
	SCInputRef i_minVol = sc.Input[0];
	
	//std::vector<st_GoodBuyOFStartBar> detectedGoodBuyStartBars;
	
	// Section 1 - Set the configuration variables and defaults
	if (sc.SetDefaults)
	{
		sc.GraphName = "SUA FIND GOOD BUY OF";

		sc.AutoLoop = 0;  //Automatic looping is enabled. 
		
		sc.GraphRegion = 0;
		
		sc.Subgraph[0].Name = "Good buy start buy";
		sc.Subgraph[0].DrawStyle = DRAWSTYLE_LINE;
		sc.Subgraph[0].PrimaryColor = RGB (0, 255, 0);
		
		i_minVol.Name = "Min Volime Of good buy orderflow start bar";
		i_minVol.SetInt(0);
		
		return;
	}
	
	
	// Section 2 - Do data processing here
	
	//msg.Format("My lucky number is %d" , luckyNumber.GetInt() );
	//sc.AddMessageToLog(msg,1);
	
	// Ensure full recalculation on load
    //sc.UpdateAlways = 1;
	
	int minVol = i_minVol.GetInt();
	int startIndex = sc.UpdateStartIndex;
	int length = 1;
	
    /*if (startIndex < length - 1) {
        startIndex = length - 1;
    }*/
	
	// Vector to store detected good buy start bar patterns
    //std::vector<st_GoodBuyOFStartBar> detectedGoodBuyStartBars;
	
	 // 1.Loop through bars to detect good buy start bar pattern
    for (int i = startIndex; i < sc.ArraySize; ++i) 
	{
		
		// Check if this is a new bar
		if (sc.GetBarHasClosedStatus(i) == BHCS_BAR_HAS_NOT_CLOSED) {
            continue;
        }
		
		bool isItStartBarOFGoodBuyOrderflow = checkValidBar(sc , i ,CHECK_5LEVEL_AND_POCATBOTTOM);
		
		if(isItStartBarOFGoodBuyOrderflow)
		{
			SCDateTime time = sc.BaseDateTimeIn[i];
            float vol = sc.Volume[i];

            // Create an EngulfingPattern object and add it to the vector
            //st_GoodBuyOFStartBar goodBuyStartBar(i, time, vol);
            //detectedGoodBuyStartBars.push_back(goodBuyStartBar);
			
			// use emplace_back
			detectedGoodBuyStartBars.emplace_back(i, time, vol);

			
			
			// Ensure the vector does not exceed the maximum size
			if (detectedGoodBuyStartBars.size() > MAX_VECTOR_SIZE) {
				detectedGoodBuyStartBars.erase(detectedGoodBuyStartBars.begin());
			}
		
		}
		
		// 2. find end bar of good buy OF
		findGoodBuyOrderFlow(sc);
		
	
	}
	
	 
	
	
	
}

bool checkValidBar(SCStudyInterfaceRef sc , int idx , int condition)
{
	const s_VolumeAtPriceV2* p_vap = NULL;	
	int numPriceLevel = sc.VolumeAtPriceForBars->GetSizeAtBarIndex(idx) ;	
	int vol;	
	int levelOFHighestVol ;	
	int highestVol = 0;	
		
	if(condition == CHECK_5LEVEL)
	{
		if(numPriceLevel == 5)
			return true;
		else
			return false;
	}
	else if(condition == CHECK_5LEVEL_AND_POCATBOTTOM)
	{
		if(numPriceLevel == 5)
		{}
	    else return false;
		
		// find POC level
		for(int pocLevel = 0 ; pocLevel < numPriceLevel ; pocLevel++)
		{
					
			sc.VolumeAtPriceForBars->GetVAPElementAtIndex(idx , pocLevel ,&p_vap );
			
			if(p_vap->Volume > highestVol)
			{
				highestVol = p_vap->Volume ;
				levelOFHighestVol = pocLevel;
				
			}			
			
			vol = p_vap->Volume ;		
			
		}
		
		if(levelOFHighestVol <= 1) return true;
		else return false;
	}
	else if(condition == CHECK_5LEVEL_AND_POCATBOTTOM_AND_UPCANDLE)
	{
		
	}
	else if(condition == CHECK_5LEVEL_AND_POCATTOP_AND_UPCANDLE)
	{
		// check is 5 level ?
		if(numPriceLevel == 5);
			//return true;
		else
			return false;
		
		// check is up candle ?
		if ( (sc.Close[idx] - sc.Low[idx]) > 0);
			//return true;
	    else
	   	   return false;
	   		
		// find POC level
		for(int pocLevel = 0 ; pocLevel < numPriceLevel ; pocLevel++)
		{
					
			sc.VolumeAtPriceForBars->GetVAPElementAtIndex(idx , pocLevel ,&p_vap );
			
			if(p_vap->Volume > highestVol)
			{
				highestVol = p_vap->Volume ;
				levelOFHighestVol = pocLevel;
				
			}			
			
			vol = p_vap->Volume ;		
			
		}
		
		if(levelOFHighestVol >= 3) return true;
		else return false;
		
	}
	
	return false;
	
}


void findGoodBuyOrderFlow(SCStudyInterfaceRef sc) {
    for (const auto& bar : detectedGoodBuyStartBars) {
        int startBarIndex = bar.index;

        for (int j = startBarIndex + 1; j < sc.ArraySize - 1; ++j) {
            if ((sc.Low[j] >= sc.High[startBarIndex] - 0.00011) && (sc.Low[j] <= sc.High[startBarIndex] + 0.00011)) {
                if (checkValidBar(sc, j, CHECK_5LEVEL_AND_POCATTOP_AND_UPCANDLE)) {
                    s_UseTool rectangle;
                    rectangle.Clear();
                    rectangle.ChartNumber = sc.ChartNumber;
                    rectangle.DrawingType = DRAWING_RECTANGLEHIGHLIGHT;
                    rectangle.BeginIndex = startBarIndex;
                    rectangle.EndIndex = j;
                    rectangle.BeginValue = sc.High[j];
                    rectangle.EndValue = sc.Low[startBarIndex];
                    rectangle.Color = RGB(255, 0, 0);
                    rectangle.LineWidth = 1;
                    rectangle.TransparencyLevel = 100;
                    rectangle.AddMethod = UTAM_ADD_OR_ADJUST;
                    rectangle.LineNumber = 7889 + startBarIndex + j;
                    sc.UseTool(rectangle);

                    // Once a valid end bar is found, break out of the loop to avoid unnecessary checks
                    //break;
                }
            }
        }
    }

    // Clear detected bars to avoid reprocessing
    //detectedGoodBuyStartBars.clear();
}


int isThisStartBarOFGoodBuyOrderflow(SCStudyInterfaceRef sc , int startIndex)
{
	
	
	return -1 ;
}


